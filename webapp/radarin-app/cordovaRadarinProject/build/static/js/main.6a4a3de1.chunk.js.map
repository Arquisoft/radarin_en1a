{"version":3,"sources":["components/MapStyles.js","components/MyGMarkers.js","components/MyStoredLocationsGMarkers.js","components/Map.js","components/MyLMarkers.js","components/MyStoredLocationsLMarkers.js","components/LeafletMap.js","components/SolidFacade.js","components/LocationListDisplay.js","components/InputLocation.js","components/FriendList.js","components/SideMenu.js","App.js","reportWebVitals.js","index.js"],"names":["op","MyGMarkers","props","state","selected","lat2","lng2","window","google","maps","geometry","spherical","computeDistanceBetween","LatLng","lat","this","lng","location","position","parseFloat","onCloseClick","setState","name","self","locations","map","distanceBetweenCoordinates","range","title","icon","url","undefined","photo","scaledSize","Size","onClick","renderInfoView","React","Component","MyStoredLocationsGMarkers","className","src","alt","pod","mapContainerStyle","width","height","MyMap","center","mapRef","options","styles","mapsStyles","zoomControl","mapTypeControl","mapTypeControlOptions","ControlPosition","TOP_CENTER","style","MapTypeControlStyle","DROPDOWN_MENU","mapTypeIds","MapTypeId","HYBRID","ROADMAP","SATELLITE","TERRAIN","id","onLoad","zoom","onCenterChanged","getCenter","myIcon","friends","setSelected","deleteLocation","data-testid","radius","MyLMarkers","lat1","lon1","pos","lon2","φ1","Math","PI","φ2","Δφ","Δλ","a","sin","cos","atan2","sqrt","friend","distanceTo","Marker","Icon","iconUrl","iconSize","Point","Popup","MyStoredLocationsLMarkers","newRange","target","value","e","console","log","popup","MapContainer","scrollWheelZoom","TileLayer","Circle","auth","require","data","default","fetch","fc","SolidFacade","locationString","getCurrentSession","session","webId","replace","postFile","Blob","currentSession","popupLogin","popupUri","fileUrl","itemExists","then","x","status","text","radar","JSON","parse","myLocations","myJSON","stringify","aclUrlParser","aclObject","permission","acl","addUserMode","agent","deleteUserMode","aclBloks","createContent","aclContent","getItemLinks","links","aclUrl","putFile","includes","person","lFriend","ring","checkFriendsPermission","push","split","coords","LocationListDisplay","InputLocation","handleSubmit","bind","event","addNewLocation","preventDefault","onSubmit","type","onChange","handleChangeName","placeholder","FriendList","friendsList","rel","href","handlePermission","SideMenu","mapType","document","getElementById","toString","length","minWidth","transform","LoggedOut","LoginButton","LoggedIn","handleNewLocation","handleDeleteLocation","solid","changeMapType","LogoutButton","displayMenu","libraries","App","currentLat","currentLng","myPhoto","getLocation","loadLocations","navigator","geolocation","getCurrentPosition","setAndSaveLocation","latitude","longitude","saveLocationToSolid","locationJson","repeated","i","addNewNotification","concat","saveStoredLocationToSolid","slice","splice","indexOf","loadStoredLocationFromSolid","loadFriendsFromSolid","getMyPhoto","reloadRing","startTimer","friendList","getFriendLocation","color","computeRing","hasExited","notifyNewFriendEntered","notifyNewFriendExited","loc","distance","lng1","setInterval","reloadAllRings","message","store","addNotification","insert","container","animationIn","animationOut","dismiss","duration","onScreen","Audio","play","marginTop","googleMapsApiKey","process","REACT_APP_GOOGLE_KEY","min","max","step","handRangeChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","renderReactDom","ReactDOM","render","StrictMode","cordova","addEventListener"],"mappings":"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","file":"static/js/main.6a4a3de1.chunk.js","sourcesContent":["const op = [\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"weight\": \"2.00\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#9c9c9c\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"labels.text\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#f2f2f2\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape.man_made\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 45\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#eeeeee\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#7b7b7b\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"labels.text.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.arterial\",\r\n        \"elementType\": \"labels.icon\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#46bcec\"\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#c8d7d4\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#070707\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"labels.text.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n\r\nexport default op;","import React from \"react\";\r\nimport {\r\n    Marker,\r\n    InfoWindow\r\n} from \"@react-google-maps/api\";\r\nimport '../App.css'\r\n\r\nclass MyGMarkers extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: null\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows distance between user current location and a target location\r\n     * @param {number} lat2 latitude of target location\r\n     * @param {number} lng2 longitude of target location\r\n     * @returns {number} distance to target location \r\n     */\r\n    distanceBetweenCoordinates(lat2, lng2) {\r\n        const distance = window.google.maps.geometry.spherical.computeDistanceBetween(\r\n            new window.google.maps.LatLng({ lat: this.props.lat, lng: this.props.lng }),\r\n            new window.google.maps.LatLng({ lat: lat2, lng: lng2 }));\r\n        return distance;\r\n    }\r\n\r\n    renderInfoView(location) {\r\n        return (\r\n            <InfoWindow position={{ lat: parseFloat(location.lat), lng: parseFloat(location.lng) }}\r\n                onCloseClick={() => this.setState({ selected: null })} >\r\n                <p>\r\n                    {location.name}\r\n                </p>\r\n            </InfoWindow>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        var self = this;\r\n        return this.props.locations.map((location) => {\r\n            if (self.distanceBetweenCoordinates(parseFloat(location.lat), parseFloat(location.lng)) < parseFloat(self.props.range)) {\r\n                return (\r\n                    <div>\r\n                        <Marker\r\n\r\n                            title={location.name}\r\n                            key={\"marker-\" + location.name}\r\n                            position={{\r\n                                lat: parseFloat(location.lat),\r\n                                lng: parseFloat(location.lng)\r\n                            }}\r\n                            icon={{ // If user has a profile image we select it, otherwise we user a default one\r\n                                url: location.photo === undefined ? \"/user.png\" : location.photo,\r\n                                scaledSize: new window.google.maps.Size(20, 20)\r\n                            }}\r\n                            onClick={() => self.setState({ selected: location })}\r\n                        />\r\n                        {\r\n                            this.state.selected === location ?\r\n                                <div>{self.renderInfoView(location)}</div>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                );\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n}\r\n\r\nexport default MyGMarkers;","import React from \"react\";\r\nimport MyGMarkers from \"./MyGMarkers.js\"\r\nimport {\r\n    Marker,\r\n    InfoWindow\r\n} from \"@react-google-maps/api\";\r\n\r\nclass MyStoredLocationsGMarkers extends MyGMarkers {\r\n\r\n    renderInfoView(location) {\r\n        location.selected = true;\r\n        return (\r\n            <InfoWindow position={{ lat: parseFloat(location.lat), lng: parseFloat(location.lng) }}\r\n                onCloseClick={() => { this.setState({ selected: null }); location.selected = false }}>\r\n                <div>\r\n                    <p>{location.name}</p>\r\n                    {location.photo !== \"./logo192.png\" ?\r\n                        <img className=\"popup-img\" src={location.photo} alt=\"error loading\"></img> : null}\r\n                </div>\r\n            </InfoWindow>\r\n        )\r\n    }\r\n    render() {\r\n        var self = this;\r\n        return this.props.locations.map((location) => {\r\n            if (self.distanceBetweenCoordinates(parseFloat(location.lat), parseFloat(location.lng)) < parseFloat(self.props.range)) {\r\n                return (\r\n                    <div>\r\n                        <Marker\r\n\r\n                            title={location.name}\r\n                            key={location.pod}\r\n                            position={{\r\n                                lat: parseFloat(location.lat),\r\n                                lng: parseFloat(location.lng)\r\n                            }}\r\n                            icon={{ // If user has a profile image we select it, otherwise we user a default one\r\n                                url: \"./logo192.png\",\r\n                                scaledSize: new window.google.maps.Size(20, 20)\r\n                            }}\r\n                            onClick={() => self.setState({ selected: location })}\r\n                        />\r\n                        {\r\n                            this.state.selected === location ?\r\n                                <div>{self.renderInfoView(location)}</div>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                );\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n}\r\nexport default MyStoredLocationsGMarkers;","import React from \"react\";\r\nimport {\r\n    GoogleMap,\r\n    Marker,\r\n    Circle\r\n} from \"@react-google-maps/api\";\r\nimport mapsStyles from \"./MapStyles\";\r\nimport '../App.css'\r\nimport MyGMarkers from './MyGMarkers.js'\r\nimport MyStoredLocationsGMarkers from './MyStoredLocationsGMarkers.js'\r\n\r\nconst mapContainerStyle = {\r\n    width: '100vw',\r\n    height: '100vh',\r\n}\r\n\r\n\r\n/**\r\n * Constant storing resulting Map configuration and its behaviour\r\n */\r\nclass MyMap extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selected: null,\r\n            center: { lat: this.props.lat, lng: this.props.lng },\r\n            mapRef: null\r\n        }\r\n\r\n        this.options = {\r\n            styles: mapsStyles,\r\n            zoomControl: true,\r\n            mapTypeControl: true,\r\n            mapTypeControlOptions: {\r\n                position: window.google.maps.ControlPosition.TOP_CENTER,\r\n                style: window.google.maps.MapTypeControlStyle.DROPDOWN_MENU,\r\n                //Default layer styles, if some layer must be removed delete it from here \r\n                mapTypeIds: [window.google.maps.MapTypeId.HYBRID, window.google.maps.MapTypeId.ROADMAP,\r\n                window.google.maps.MapTypeId.SATELLITE, window.google.maps.MapTypeId.TERRAIN]\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"map-Container\">\r\n                <GoogleMap\r\n                    id=\"radarin-map\"\r\n                    onLoad={(map) => this.setState({ mapRef: map })}\r\n                    mapContainerStyle={mapContainerStyle}\r\n                    zoom={this.props.zoom}\r\n                    center={this.state.center}\r\n                    options={this.options}\r\n                    onCenterChanged={() => this.state.mapRef !== null ? this.setState({ center: this.state.mapRef.getCenter() }) : false}\r\n                >\r\n                    {/* User current location marker */}\r\n                    <Marker\r\n                        position={{ lat: this.props.lat, lng: this.props.lng, }}\r\n                        icon={{\r\n                            url: this.props.myIcon,\r\n                            scaledSize: new window.google.maps.Size(36, 36)\r\n                        }}\r\n                    />\r\n                    <MyGMarkers locations={this.props.friends} setSelected={this.setSelected} lat={this.props.lat} lng={this.props.lng} range={this.props.range} />\r\n                    <MyStoredLocationsGMarkers locations={this.props.locations} setSelected={this.setSelected} lat={this.props.lat} lng={this.props.lng} range={this.props.range} \r\n                                                deleteLocation = {(location) => this.props.deleteLocation(location)}/>\r\n                    {/* Visualization of range selected by the user */}\r\n                    <Circle data-testid=\"friends-circle\" center={{ lat: this.props.lat, lng: this.props.lng }} radius={parseFloat(this.props.range)} />\r\n                </GoogleMap>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MyMap;","import React from \"react\";\r\nimport { Point, Icon } from 'leaflet'\r\nimport { Marker, Popup } from 'react-leaflet'\r\n\r\nexport default class MyLMarkers extends React.Component {\r\n\r\n    // SOURCE OF THIS ALGORITHM : https://www.movable-type.co.uk/scripts/latlong.html\r\n    distanceTo(lat1, lon1) {\r\n\r\n        const lat2 = this.props.pos[0];\r\n        const lon2 = this.props.pos[1];\r\n\r\n        const R = 6371e3; // metres\r\n        const φ1 = lat1 * Math.PI / 180; // φ, λ in radians\r\n        const φ2 = lat2 * Math.PI / 180;\r\n        const Δφ = (lat2 - lat1) * Math.PI / 180;\r\n        const Δλ = (lon2 - lon1) * Math.PI / 180;\r\n\r\n        const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n            Math.cos(φ1) * Math.cos(φ2) *\r\n            Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n        return R * c; // in metres\r\n\r\n    }\r\n\r\n    render() {\r\n        return this.props.friends.map(\r\n            (friend) => {\r\n                if (this.distanceTo(parseFloat(friend.lat), parseFloat(friend.lng)) < this.props.range) {\r\n                    return (\r\n                        <Marker position={[friend.lat, friend.lng]} icon={new Icon({\r\n                            iconUrl: friend.photo === undefined ? \"./user.png\" : friend.photo,\r\n                            iconSize: new Point(20, 20),\r\n                        })}>\r\n                            <Popup>\r\n                                {friend.name}\r\n                            </Popup>\r\n                        </Marker>\r\n                    )\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { Point, Icon } from 'leaflet'\r\nimport { Marker, Popup } from 'react-leaflet'\r\nimport MyLMarkers from \"./MyLMarkers.js\"\r\n\r\nexport default class MyStoredLocationsLMarkers extends MyLMarkers {\r\n\r\n    render() {\r\n        return this.props.locations.map(\r\n            (location) => {\r\n                if (this.distanceTo(parseFloat(location.lat), parseFloat(location.lng)) < this.props.range) {\r\n                    return (\r\n                        <Marker position={[location.lat, location.lng]} icon={new Icon({\r\n                            iconUrl: \"./logo192.png\",\r\n                            iconSize: new Point(20, 20),\r\n                        })}>\r\n                            <Popup>\r\n                                <p>{location.name}</p>\r\n                                {location.photo !== \"./logo192.png\" ?\r\n                                    <img className=\"popup-img\" src={location.photo} alt=\"error loading\"></img> : null}\r\n                            </Popup>\r\n                        </Marker>\r\n                    )\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        )\r\n    }\r\n}","\r\nimport React from \"react\";\r\nimport { Point, Icon } from 'leaflet'\r\nimport { MapContainer, TileLayer, Marker, Circle } from 'react-leaflet'\r\nimport MyLMarkers from \"./MyLMarkers.js\"\r\nimport MyStoredLocationsLMarkers from \"./MyStoredLocationsLMarkers.js\"\r\n/**\r\n * Constant storing resulting Map configuration and its behaviour\r\n */\r\nclass MyMap extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            pos: [props.lat, props.lng],\r\n            myIcon: this.props.myIcon\r\n        }\r\n    }\r\n\r\n    handleRangeChange(newRange) {\r\n        this.setState({ range: newRange.target.value })\r\n    }\r\n\r\n    handlePopupClose(e) {\r\n        console.log(e.popup)\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <MapContainer center={this.state.pos} zoom={this.props.zoom} scrollWheelZoom={true}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                <Marker position={this.state.pos} icon={new Icon({\r\n                    iconUrl: this.state.myIcon === undefined ? \"./user.png\" : this.props.myIcon,\r\n                    iconSize: new Point(36, 36),\r\n                })}>\r\n                </Marker>\r\n                <MyLMarkers friends={this.props.friends} pos={this.state.pos} range={this.props.range} />\r\n                <MyStoredLocationsLMarkers locations={this.props.locations} pos={this.state.pos} range={this.props.range} />\r\n                <Circle center={this.state.pos} radius={this.props.range} />\r\n\r\n            </MapContainer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MyMap;","const auth = require('solid-auth-client');\r\nconst { default: data } = require('@solid/query-ldflex');\r\nconst fetch = auth.fetch;\r\nconst FC = require('solid-file-client');\r\nconst fc = new FC(auth);\r\n\r\nclass SolidFacade {\r\n\r\n    /**\r\n\r\n     * Saves the location inserted as a param into the solid pod\r\n     * @param {number} lat latitude of the location\r\n     * @param {number} lng longitude of the location\r\n     */\r\n    async saveLocationToSolid(lat, lng) {\r\n        var locationString = lat + ',' + lng;\r\n\r\n        let session = await this.getCurrentSession();\r\n        let url = await session.webId.replace(\"profile/card#me\", \"radarin/last.txt\");\r\n        if (lat != null && lng != null) {\r\n            // If the file does not exist its created, otherwise is just overwritten\r\n            await fc.postFile(url, new Blob([locationString]));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the current session\r\n     * @returns the current session\r\n     */\r\n    async getCurrentSession() {\r\n        let session = await auth.currentSession();\r\n        if (!session) {\r\n            let popupUri = './popup.html';\r\n            session = await auth.popupLogin({ popupUri });\r\n        }\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * First, access the file stored_locations.json or creates it if it does not exist.\r\n     * Then, loads the locations stored in the file and returns it\r\n     * @returns locations loaded from the pod\r\n     */\r\n    async loadStoredLocationFromSolid() {\r\n        let session = await this.getCurrentSession();\r\n\r\n        // If the file does not exist, is created\r\n        let fileUrl = session.webId.replace(\"profile/card#me\", \"radarin/stored_locations.json\");\r\n        if (!(await fc.itemExists(fileUrl)))\r\n            await fc.postFile(fileUrl, new Blob());\r\n        // Until here\r\n\r\n        let url = session.webId.replace(\"profile/card#me\", \"radarin/stored_locations.json\");\r\n        let radar = await fetch(url).then((x) => {\r\n            if (x.status === 200)  // if the file exists, return the text\r\n                return x.text()\r\n            else\r\n                return undefined;\r\n        });\r\n        if (radar === undefined || radar === \"\" || radar === null)\r\n            return;\r\n        console.log(radar);\r\n        var locations = JSON.parse(radar);\r\n        if(locations === undefined){\r\n            locations = [];\r\n        }\r\n        return locations;\r\n    }\r\n\r\n    /**\r\n    * Saves the locations into the solid profile\r\n    * @param {Array} myLocations locations that are stored into the the pod\r\n    */\r\n    async saveStoredLocationToSolid(myLocations) {\r\n        let session = await this.getCurrentSession();\r\n        // If the file does not exist, it is created\r\n        let fileUrl = session.webId.replace(\"profile/card#me\", \"radarin/stored_locations.json\");\r\n        let myJSON = JSON.stringify(myLocations);\r\n        await fc.postFile(fileUrl, new Blob([myJSON]));\r\n    }\r\n\r\n    /**\r\n     * Works as a switch, gives or not the permission to a friend to see your location\r\n     * @param {Friend} friend object representing a friend\r\n     */\r\n    async handlePermission(friend) {\r\n        let session = await this.getCurrentSession();\r\n        let url = session.webId.replace(\"profile/card#me\", \"radarin/last.txt\");\r\n        let aclObject = await fc.aclUrlParser(url)\r\n        if (!friend.permission) {\r\n            friend.permission = true;\r\n            aclObject = await fc.acl.addUserMode(aclObject, [{ agent: friend.pod }], ['Read']);\r\n        } else {\r\n            friend.permission = false;\r\n            aclObject = await fc.acl.deleteUserMode(aclObject, [{ agent: friend.pod }], ['Read']);\r\n        }\r\n        const aclBloks = [aclObject] // array of block rules\r\n        const aclContent = await fc.acl.createContent('radarin/last.txt', aclBloks);\r\n        const { acl: aclUrl } = await fc.getItemLinks(url, { links: 'include_possible' });\r\n        fc.putFile(aclUrl, aclContent, 'text/turtle');\r\n    }\r\n\r\n    /**\r\n     * It does a first check when starting the web to see if you have the friends permission\r\n     * @param {Friend} friend object that represents the friend\r\n     */\r\n    async checkFriendsPermission(friend) {\r\n        let session = await this.getCurrentSession();\r\n        let url = session.webId.replace(\"profile/card#me\", \"radarin/last.txt\");\r\n\r\n        let aclObject = await fc.aclUrlParser(url)\r\n        const aclBloks = [aclObject] // array of block rules\r\n        const aclContent = await fc.acl.createContent('radarin/last.txt', aclBloks);\r\n\r\n        // TODO: This is a dirty hack, we should properly check if the user has permissions, not just look if its webID is on the list\r\n        friend.permission = (aclContent.includes(friend.pod));\r\n\r\n    }\r\n\r\n    // TODO\r\n    /**\r\n     * Retrives the photo from the pod\r\n     * @returns photo user picture from his pod\r\n     */\r\n    async getMyPhoto() {\r\n        let session = await this.getCurrentSession();\r\n        return data[session.webId][\"vcard:hasPhoto\"].then((x) => {\r\n            var photo = \"./user.png\";\r\n            if (x !== undefined) {\r\n                photo = x.value;\r\n            }\r\n            return photo;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the friends list from the session\r\n     * @returns {Array} friends list of friends stored in the pod\r\n     */\r\n    async loadFriendsFromSolid() {\r\n        var friends = [];\r\n        var session = await this.getCurrentSession();\r\n        var person = data[session.webId]\r\n        for await (const friend of person.friends) {\r\n            var lFriend = {\r\n                pod: `${await data[friend]}`,\r\n                name: await data[friend].name.value,\r\n                photo: await data[friend][\"vcard:hasPhoto\"].value,\r\n                lat: null,\r\n                lng: null,\r\n                ring: 3,\r\n                permission: null\r\n            };\r\n            this.checkFriendsPermission(lFriend);\r\n            friends.push(lFriend);\r\n        }\r\n        return friends;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the location given a friend as a param\r\n     * @param {Friend} friend object representing the solid friends\r\n     * @returns coords the coordinates of the friend\r\n     */\r\n    async getFriendLocation(friend){\r\n        var url = friend.pod.split('profile')[0] // We have to do this because friends are saved with the full WebID (example.inrupt.net/profile/card#me)\r\n        var location = await fetch(url + '/radarin/last.txt').then((x) => { //Fetch the file from the pod's storage\r\n            if (x.status === 200)  // if the file exists, return the text\r\n                return x.text();\r\n            else\r\n                return null;\r\n        });\r\n        if (location === null) {\r\n            return null;\r\n        }\r\n        let coords = location.split(\",\")\r\n        return coords;\r\n    }\r\n\r\n}\r\n\r\nexport default SolidFacade;","import React from 'react';\r\n// Obtains the list of locations and returns the html list of\r\n// locations with a button to delete each one\r\nclass LocationListDisplay extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <table className=\"locations\">\r\n                <tbody>\r\n                {\r\n                this.props.locations !== undefined ? \r\n                this.props.locations.map((location) => {\r\n                    return (\r\n                        <tr>\r\n                            <th key={location.name} className={location.selected? \"activeLocation\": \"inactiveLocation\"}>\r\n                                {location.name}</th>\r\n                            <th><button className=\"button-delete-location\" onClick={() => this.props.deleteLocation(location)}>➖</button></th>\r\n                        </tr>\r\n                    );\r\n                }): null}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\nexport default LocationListDisplay","import React from 'react';\r\n\r\nclass InputLocation extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\"\r\n    }\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  // Handles the value change of the state\r\n  handleChangeName(event) {\r\n    this.setState({ name: event.target.value });\r\n  }\r\n\r\n  // Handles the new location and adds it into the props\r\n  handleSubmit(event) {\r\n    this.props.addNewLocation(this.state.name);\r\n    event.preventDefault();\r\n  }\r\n\r\n  // Renders the text input and the button that adds\r\n  // the locations entered in the input\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3 className=\"friends-title\">Store your current location:</h3>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input id=\"newLocationText\" type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChangeName.bind(this)} placeholder=\"Name of the location\" />\r\n          <input type=\"submit\" value=\"➕\" className=\"button-add-location\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default InputLocation","import React from 'react';\r\n\r\nclass FriendList extends React.Component {\r\n\r\n    render() {\r\n        let friendsList = this.props.friends;\r\n        if (friendsList !== undefined)\r\n            return (\r\n                <div>\r\n                    <h3 className =\"friends-title\">Friends list:</h3>\r\n                    <table id='friends'>\r\n                        <tbody>\r\n                        {friendsList.map((friend) => {\r\n                            var photo = friend.photo;\r\n                            if (photo === undefined)\r\n                                photo = \"/user.png\";\r\n                            // Alt is a tag that's used when the image cannot be loaded,\r\n                            // needed, if not warnings are sent\r\n                            // Using target=\"_blank\" without rel=\"noreferrer\" is a security risk\r\n                            return <tr key= {\"friend-tr-\" + friend.pod}>\r\n                            <th key= {\"friend-th1-\" + friend.pod} className=\"profile-pic\"><img width=\"24px\" height=\"24px\" src={photo} alt=\"Load error\" /></th>\r\n                            <th key= {\"friend-th2-\" + friend.pod}><a id={\"friend-\" + friend.pod} target=\"_blank\" rel=\"noreferrer\" className=\"friendLink\" href={friend.pod}>{friend.name}</a></th>\r\n                            <th key= {\"friend-th3-\" + friend.pod}><button title=\"Enable/Disable friend's permissions\" className=\"button-permission\" id={\"button-\" + friend.pod} \r\n                                        onClick={() => this.props.handlePermission(friend)}>{friend.permission?\"✔️\":\"❌\"}</button></th>\r\n                            </tr>\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>)\r\n        else return <div></div>;\r\n    }\r\n}\r\n\r\nexport default FriendList","import React from \"react\";\r\n\r\nimport { LoggedIn, LoginButton, LogoutButton, LoggedOut } from '@solid/react';\r\nimport LocationListDisplay from \"./LocationListDisplay.js\";\r\nimport InputLocation from \"./InputLocation.js\";\r\nimport FriendList from './FriendList.js';\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mapType: props.mapType\r\n        }\r\n    }\r\n\r\n    // Displays the side menu \r\n    displayMenu() {\r\n\r\n        var width = document.getElementById('sidemenu').style.width;\r\n        if (width.toString().length === 0) {\r\n            document.getElementById('sidemenu').style.width = '25%';\r\n            document.getElementById('sidemenu').style.minWidth = \"400px\";\r\n            document.getElementById('ShowMenu').style.transform = \"scaleX(-1)\";\r\n        }\r\n        else {\r\n            document.getElementById('sidemenu').style.width = '';\r\n            document.getElementById('sidemenu').style.minWidth = \"0px\";\r\n            document.getElementById('ShowMenu').style.transform = \"scaleX(1)\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div id=\"sidemenu\">\r\n\r\n            <LoggedOut>\r\n                <LoginButton className=\"button-Login\" popup=\"./popup.html\" />\r\n            </LoggedOut>\r\n\r\n            <LoggedIn>\r\n\r\n                <InputLocation addNewLocation={(name) => this.props.handleNewLocation(name)} /><hr />\r\n                <LocationListDisplay locations={this.props.myLocations} deleteLocation={(location) => this.props.handleDeleteLocation(location)} /><hr />\r\n                <FriendList friends={this.props.friends} handlePermission={(friend) => this.props.solid.handlePermission(friend)}></FriendList><hr />\r\n                <button onClick={() => this.props.changeMapType()} className=\"button-ChangeMap\">Change Map</button><hr />\r\n                <LogoutButton className=\"button-Logout\" />\r\n            </LoggedIn>\r\n\r\n            <button id=\"ShowMenu\" onClick={() => this.displayMenu()}><img src=\"./oMenu.png\" alt=\"_\" /></button>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default SideMenu;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport GMap from \"./components/Map\";\r\nimport LMap from \"./components/LeafletMap\";\r\nimport './App.css';\r\nimport './leaflet.css';\r\nimport { LoadScript } from \"@react-google-maps/api\"\r\nimport ReactNotification from 'react-notifications-component'\r\nimport { store } from 'react-notifications-component';\r\nimport 'react-notifications-component/dist/theme.css'\r\nimport SolidFacade from './components/SolidFacade';\r\nimport SideMenu from './components/SideMenu';\r\n\r\nconst solid = new SolidFacade();\r\nconst libraries = [\"places\", \"geometry\"];\r\nconst google = window.google;\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      currentLat: null,\r\n      currentLng: null,\r\n      friends: [],\r\n      myPhoto: \"./user.png\",\r\n      myLocations: [],// Locations from solid pod and manually added\r\n      mapType: 'gmap',\r\n      range: 6000,\r\n      zoom: 13\r\n    };\r\n    this.getLocation();\r\n    this.loadLocations();\r\n  }\r\n\r\n  // Obtains the localization with the navigator\r\n  // Then saves the localization into the last.txt file of the pod\r\n  getLocation() {\r\n    const self = this;\r\n\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(function (position) { //watchPosition()\r\n        self.setAndSaveLocation(position)\r\n      })\r\n    }\r\n  }\r\n\r\n  // Intermediate step to make the getLocation and saveLocationToSolid work syncronous\r\n  setAndSaveLocation(position) {\r\n    // Sets the latitude and longitude into the state\r\n    // Latitude and longitude are taken from the geolocation\r\n    this.setState({\r\n      currentLat: position.coords.latitude,\r\n      currentLng: position.coords.longitude\r\n    })\r\n    solid.saveLocationToSolid(this.state.currentLat, this.state.currentLng)\r\n  }\r\n\r\n  // Handles the insertion of a new location checking that it is not empty\r\n  // It also checks if the location is already in the list before inserting it\r\n  handleNewLocation(name) {\r\n\r\n    if (name === \"\") {\r\n      this.addNewNotification(\"Empty location name not allowed!\", \"Please, add an unique tag to save your location\", \"danger\");\r\n      return;\r\n    }\r\n    let locationJson = {\r\n      lat: this.state.currentLat,\r\n      lng: this.state.currentLng,\r\n      name: name,\r\n      photo: \"./logo192.png\"\r\n    };\r\n\r\n    let repeated = false;\r\n    for (let i = 0; i < this.state.myLocations.length; i++) {\r\n      if (locationJson.name === this.state.myLocations[i].name)\r\n        repeated = true;\r\n    }\r\n    if (!repeated) {\r\n      const myLocations = this.state.myLocations.concat(locationJson);\r\n      this.setState({ myLocations });\r\n      document.getElementById('newLocationText').value = \"\";\r\n      solid.saveStoredLocationToSolid(myLocations);\r\n    }\r\n    else\r\n      this.addNewNotification(\"Repeated location name not allowed!\", \"Please, add an unique tag to save your location\", \"danger\");\r\n  }\r\n\r\n  // Handles the deletion of a location and \r\n  // deletes the location from myLocations of the state\r\n  handleDeleteLocation(location) {\r\n    const myLocations = this.state.myLocations.slice();\r\n    myLocations.splice(myLocations.indexOf(location), 1);\r\n    this.setState({ myLocations });\r\n    solid.saveStoredLocationToSolid();\r\n  }\r\n\r\n  // Method that loads the friends location to \r\n  // show them in the map later\r\n  // TODO: Cambiar el nombre de esto\r\n  async loadLocations() {\r\n\r\n    // First, we load and store the stored locations:\r\n    let myLocations = await solid.loadStoredLocationFromSolid()\r\n    if(myLocations === undefined){\r\n      myLocations = [];\r\n    }\r\n    this.setState({ myLocations });\r\n    \r\n    // Then we do the same with the friends locations and data:\r\n    var friends = await solid.loadFriendsFromSolid();\r\n    this.setState({ friends: friends });\r\n\r\n    // Finally, we get our own profile pic, and store it:\r\n    var photo = await solid.getMyPhoto();\r\n    this.setState({ myPhoto: photo });\r\n    //Reloads the first one to ask for every friend's location\r\n    this.reloadRing(3);\r\n    this.startTimer();\r\n  }\r\n\r\n  /**\r\n   * Method that requests the locations of the friends in a given ring\r\n   * @param {*} ring \r\n   */\r\n  async reloadRing(ring) {\r\n    // We do this to get a copy of the list of friends.\r\n    let friendList = this.state.friends;\r\n    if (friendList !== undefined) {\r\n      for await (var friend of friendList) {\r\n        if (friend.ring === ring) {\r\n\r\n          var coords = await solid.getFriendLocation(friend);\r\n          if (coords !== null) {\r\n            //TODO: validate what we have before pushing it (it has to be two doubles separated by a comma)\r\n            document.getElementById(\"friend-\" + friend.pod).style.color = \"lime\";\r\n            friend.lat = coords[0];\r\n            friend.lng = coords[1];\r\n            friend.ring = this.computeRing(friend);\r\n            if (friend.ring === 1 && ring !== 1 && !friend.hasExited) {\r\n              this.notifyNewFriendEntered(friend.name);\r\n              friend.hasExited = true;\r\n            }\r\n            if (friend.ring !== 1 && ring === 1 && friend.hasExited) {\r\n              this.notifyNewFriendExited(friend.name);\r\n              friend.hasExited = false;\r\n            }\r\n          }\r\n          else {\r\n            document.getElementById(\"friend-\" + friend.pod).style.color = \"grey\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({ friends: friendList });\r\n\r\n  }\r\n  /**\r\n   * Calculates and returns the ring a friend belongs to\r\n   * @param {Object} friend \r\n   * @returns {int} corresponding ring\r\n   */\r\n  computeRing(friend) {\r\n    var loc = { lat: parseFloat(friend.lat), lng: parseFloat(friend.lng) };\r\n    var distance = this.distanceBetweenCoordinates(loc.lat, loc.lng);\r\n    //Returns the corresponding ring\r\n    if (distance <= this.state.range) {\r\n      return 1;\r\n    }\r\n    if (distance <= (this.state.range * 1.5)) {\r\n      return 2;\r\n    }\r\n    if (distance > (this.state.range * 1.5)) {\r\n      return 3;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates and returns the distance between the current location of the user and a given location\r\n   * @param {*} lat latitude to compute the distance to\r\n   * @param {*} lng longitude to compute the distance to\r\n   * @returns  distance between the user and the given location\r\n   */\r\n  // SOURCE OF THIS ALGORITHM : https://www.movable-type.co.uk/scripts/latlong.html\r\n  distanceBetweenCoordinates(lat1, lng1) {\r\n    const lat2 = parseFloat(this.state.currentLat);\r\n    const lng2 = parseFloat(this.state.currentLng);\r\n\r\n    const R = 6371e3; // metres\r\n    const φ1 = lat1 * Math.PI / 180; // φ, λ in radians\r\n    const φ2 = lat2 * Math.PI / 180;\r\n    const Δφ = (lat2 - lat1) * Math.PI / 180;\r\n    const Δλ = (lng2 - lng1) * Math.PI / 180;\r\n\r\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n      Math.cos(φ1) * Math.cos(φ2) *\r\n      Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n    return R * c; // in metres  \r\n  }\r\n\r\n  /**\r\n   * Starts the timer to reload the friends locations\r\n   */\r\n  async startTimer() {\r\n    let self = this;\r\n    setInterval(() => {\r\n      self.reloadRing(1);\r\n      //self.getLocation();\r\n    }, 1000); // 1 second\r\n    setInterval(() => {\r\n      self.reloadRing(2);\r\n    }, 10000); // 10 seconds\r\n    setInterval(() => {\r\n      self.reloadRing(3);\r\n    }, 60000); // 1 minute\r\n    //this.reloadRing()\r\n  }\r\n  reloadAllRings(){\r\n    this.reloadRing(1);\r\n    this.reloadRing(2);\r\n    this.reloadRing(3);\r\n  }\r\n  // Handles the change of the range slider\r\n  handRangeChange(event) {\r\n    this.setState({ range: event.target.value })\r\n    this.reloadAllRings();\r\n  }\r\n\r\n  notifyNewFriendEntered(name) {\r\n    var message = \"Your friend \" + name + \" is near you!\";\r\n    this.addNewNotification(\"New friend nearby!\", message, \"success\");\r\n  }\r\n  notifyNewFriendExited(name) {\r\n    var message = \"Your friend \" + name + \" went away!\";\r\n    this.addNewNotification(\"Friend out of the radar!\", message, \"warning\");\r\n  }\r\n  /**\r\n   * Function to add new notification in our GUI\r\n   */\r\n  addNewNotification(title, message, type) {\r\n    store.addNotification({\r\n      title: title,\r\n      message: message,\r\n      type: type,\r\n      insert: \"bottom\",\r\n      container: \"bottom-left\",\r\n      animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n      animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n      dismiss: {\r\n        duration: 5000,\r\n        onScreen: true\r\n      }\r\n    }\r\n    )\r\n    var audio = new Audio('n_sound.mp3');\r\n    audio.play();\r\n  }\r\n\r\n  changeMapType() {\r\n    if (this.state.mapType === 'gmap') {\r\n      this.setState({ mapType: 'lmap' });\r\n      document.getElementById('ShowMenu').style.marginTop = \"10vh\";\r\n      console.log(this.state.myLocations)\r\n    }\r\n    else {\r\n      this.setState({ mapType: 'gmap' });\r\n      document.getElementById('ShowMenu').style.marginTop = \"1vh\";\r\n    }\r\n  }\r\n\r\n  // Renders the most part of the webpage:\r\n  // - Title\r\n  // - Menu button and menu\r\n  // - Range and its slider\r\n  // - Usable map\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {google ? null : <LoadScript\r\n          id=\"script-loader\"\r\n          googleMapsApiKey={process.env.REACT_APP_GOOGLE_KEY}\r\n          libraries={libraries}> </LoadScript>}\r\n\r\n        <SideMenu handleNewLocation={(name) => this.handleNewLocation(name)} myLocations={this.state.myLocations}\r\n          solid={solid} friends={this.state.friends} changeMapType={(mapType) => this.changeMapType(mapType)} handleDeleteLocation={(location) => this.handleDeleteLocation(location)} />\r\n        {/* System notification componenet */}\r\n        <ReactNotification />\r\n\r\n        <div className=\"slider-container\">\r\n          <input className=\"slider\" type=\"range\" min=\"1000\" max=\"100000\" step=\"500\" value={this.state.range} onChange={this.handRangeChange.bind(this)} />\r\n        </div>\r\n        {\r\n\r\n          this.state.currentLat && this.state.currentLng ?\r\n            this.state.mapType === 'gmap' && window.google !== undefined ?\r\n\r\n              <GMap lat={this.state.currentLat} lng={this.state.currentLng} friends={this.state.friends}\r\n                myIcon={this.state.myPhoto} locations={this.state.myLocations} range={this.state.range}\r\n                deleteLocation={(location) => this.handleDeleteLocation(location)} zoom={this.state.zoom} />\r\n\r\n              : this.state.mapType === 'lmap' ?\r\n\r\n                <LMap lat={this.state.currentLat} lng={this.state.currentLng} friends={this.state.friends}\r\n                  myIcon={this.state.myPhoto} locations={this.state.myLocations} range={this.state.range} zoom={this.state.zoom} />\r\n\r\n                : <div />\r\n            : (<div className=\"loader\"></div>)\r\n        }\r\n      </div >\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\nconst renderReactDom = () => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <App />\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n};\r\n\r\nif (window.cordova) {\r\n    document.addEventListener('deviceready', () => {\r\n        renderReactDom();\r\n    }, false);\r\n} else {\r\n    renderReactDom();\r\n}\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}